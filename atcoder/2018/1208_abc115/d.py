# Python3 (3.4.3)
import sys
input = sys.stdin.readline

# -------------------------------------------------------------
# function
# -------------------------------------------------------------
def dfs(N,X):
    # Lv.0
    if N == 0:
        # 調べる数が残っていれば : 1
        if X > 0:
            return 1
        # 残ってなければ : 0
        else:
            return 0
    # Lv.1以上
    else:
        # 下側の Lv.n-1 までの場合
        if X <= 1 + T[N-1]:
            return dfs(N-1,X-1)
        # 真ん中のパティまでの場合
        elif X == 1 + T[N-1] + 1:
            return P[N-1] + 1
        # 上側の Lv.n-1 までの場合
        else:
            return P[N-1] + 1 + dfs(N-1,X-2-T[N-1])

# -------------------------------------------------------------
# main
# -------------------------------------------------------------
N,X = map(int,input().split())

# 事前計算
# T[i] : Lv i バーガーの層数
# P[i] : Lv i バーガーのパティ数
T,P = [0]*(N+1),[0]*(N+1)
T[0],P[0] = 1,1
for i in range(N):
    T[i+1] = T[i]*2 + 3
    P[i+1] = P[i]*2 + 1

print(dfs(N,X))